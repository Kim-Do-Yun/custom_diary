================================================================================
                        Studio9910 프로젝트 기능명세서
================================================================================

프로젝트명: Studio9910 - AI 기반 다이어리 웹툰 생성 앱
작성일: 2024년 12월
버전: 1.0 (회원가입 플로우 완성 단계)
플랫폼: Android (Kotlin)

================================================================================
목차
================================================================================

1. 문서 개요
2. 기능 목록
3. 상세 기능 명세
   3.1 약관 동의 기능 (F001)
   3.2 이메일 입력 기능 (F002)
   3.3 비밀번호 설정 기능 (F003)
   3.4 비밀번호 확인 기능 (F004)
   3.5 개인정보 입력 기능 (F005)
   3.6 장르 선택 기능 (F006)
   3.7 그림체 선택 기능 (F007)
4. 통합 시나리오 테스트
5. 성능 및 품질 기준

================================================================================
1. 문서 개요
================================================================================

1.1 문서 목적
- Studio9910 앱의 회원가입 플로우 기능에 대한 상세 명세 제공
- 각 기능별 정상/대안/예외 흐름 및 테스트 케이스 정의
- AI 웹툰 생성을 위한 사용자 데이터 수집 과정 문서화

1.2 범위
- 현재 완성된 7단계 회원가입 플로우
- 각 단계별 입력 검증 및 UI 피드백 로직
- AI 개인화를 위한 선호도 데이터 수집 기능

1.3 참조 문서
- 요구사항분석서.txt
- BaseSignupActivity.kt 및 각 Activity 소스코드
- 관련 레이아웃 XML 파일

================================================================================
2. 기능 목록
================================================================================

F001: 약관 동의 기능 (SignupTermsActivity)
F002: 이메일 입력 기능 (SignupEmailActivity)
F003: 비밀번호 설정 기능 (SignupPasswordActivity)
F004: 비밀번호 확인 기능 (SignupPasswordConfirmActivity)
F005: 개인정보 입력 기능 (SignupProfileActivity)
F006: 장르 선택 기능 (SignupGenreActivity)
F007: 그림체 선택 기능 (SignupArtStyleActivity)

================================================================================
3. 상세 기능 명세
================================================================================

================================================================================
3.1 약관 동의 기능 (F001)
================================================================================

3.1.1 기능 개요
- 기능명: 약관 동의 및 계층적 체크박스 관리
- 담당 클래스: SignupTermsActivity
- 목적: AI 서비스 이용을 위한 필수/선택 약관 동의 수집

3.1.2 기능 상세 명세

[입력 요소]
- 전체 동의 체크박스 (allAgreeCheck)
- 필수 약관 그룹 체크박스 (requiredCheck)
- 선택 약관 그룹 체크박스 (optionalCheck)
- 개별 필수 약관 체크박스 3개 (required_item_1~3)
- 개별 선택 약관 체크박스 3개 (optional_item_1~3)
- 다음 버튼 (nextButton)

[출력 요소]
- 체크 상태에 따른 아이콘 색상 변경
- 다음 버튼 활성화/비활성화
- SignupEmailActivity로 화면 전환

[데이터 처리]
- requiredItemsChecked: MutableList<Boolean> (필수 약관 상태)
- optionalItemsChecked: MutableList<Boolean> (선택 약관 상태)
- allChecked, requiredChecked, optionalChecked: Boolean

3.1.3 정상 흐름 (Normal Flow)

N1. 사용자가 앱을 시작하고 로그인 화면에서 "회원가입" 버튼 클릭
N2. 약관 동의 화면이 표시됨
N3. 사용자가 "전체 동의" 체크박스 클릭
N4. 시스템이 모든 하위 체크박스를 자동으로 선택 상태로 변경
N5. 시스템이 다음 버튼을 활성화 상태로 변경
N6. 사용자가 "다음" 버튼 클릭
N7. 시스템이 이메일 입력 화면으로 전환

3.1.4 대안 흐름 (Alternative Flow)

A1. 개별 필수 약관 선택 시나리오
A1-1. 사용자가 개별 필수 약관 체크박스를 하나씩 클릭
A1-2. 시스템이 각 체크박스 상태를 업데이트
A1-3. 모든 필수 약관이 체크되면 "필수 약관" 그룹 체크박스 자동 선택
A1-4. 시스템이 다음 버튼 활성화

A2. 필수 약관 그룹 선택 시나리오
A2-1. 사용자가 "필수 약관" 그룹 체크박스 클릭
A2-2. 시스템이 모든 필수 약관 하위 항목을 일괄 선택
A2-3. 시스템이 다음 버튼 활성화

A3. 선택 약관 포함 시나리오
A3-1. 사용자가 필수 약관과 일부 선택 약관을 선택
A3-2. 시스템이 선택된 약관 상태를 기록
A3-3. 필수 약관이 모두 선택되어 다음 버튼 활성화

3.1.5 예외 흐름 (Exception Flow)

E1. 필수 약관 미선택 시나리오
E1-1. 사용자가 필수 약관을 일부만 선택하고 다음 버튼 클릭 시도
E1-2. 시스템이 다음 버튼을 비활성화 상태로 유지
E1-3. 클릭 이벤트가 무시됨

E2. 전체 동의 해제 시나리오
E2-1. 사용자가 전체 동의 후 전체 동의 체크박스 재클릭
E2-2. 시스템이 모든 하위 체크박스를 해제 상태로 변경
E2-3. 시스템이 다음 버튼을 비활성화

3.1.6 테스트 케이스

TC001-001: 전체 동의 체크박스 기능 테스트
[전제조건] 약관 동의 화면이 표시된 상태
[테스트 단계]
1. 전체 동의 체크박스 클릭
2. 모든 하위 체크박스 상태 확인
3. 다음 버튼 활성화 상태 확인
[예상 결과] 
- 모든 하위 체크박스가 체크됨
- 다음 버튼이 활성화됨
- 체크 아이콘 색상이 #FF6F61로 변경됨

TC001-002: 개별 필수 약관 체크 테스트
[전제조건] 약관 동의 화면이 표시된 상태
[테스트 단계]
1. 첫 번째 필수 약관 체크박스 클릭
2. 두 번째 필수 약관 체크박스 클릭
3. 세 번째 필수 약관 체크박스 클릭
4. 필수 약관 그룹 체크박스 상태 확인
5. 다음 버튼 상태 확인
[예상 결과]
- 필수 약관 그룹 체크박스가 자동으로 체크됨
- 다음 버튼이 활성화됨

TC001-003: 필수 약관 부분 선택 테스트
[전제조건] 약관 동의 화면이 표시된 상태
[테스트 단계]
1. 첫 번째 필수 약관만 체크
2. 다음 버튼 상태 확인
3. 다음 버튼 클릭 시도
[예상 결과]
- 다음 버튼이 비활성화 상태 유지
- 다음 버튼 클릭 시 화면 전환 없음

TC001-004: 선택 약관 개별 선택 테스트
[전제조건] 모든 필수 약관이 체크된 상태
[테스트 단계]
1. 첫 번째 선택 약관 체크
2. 선택 약관 그룹 체크박스 상태 확인
3. 다음 버튼 클릭
[예상 결과]
- 선택 약관 그룹은 체크되지 않음 (부분 선택)
- 다음 버튼 정상 작동하여 이메일 화면으로 전환

TC001-005: 전체 동의 후 해제 테스트
[전제조건] 전체 동의가 체크된 상태
[테스트 단계]
1. 전체 동의 체크박스 재클릭
2. 모든 하위 체크박스 상태 확인
3. 다음 버튼 상태 확인
[예상 결과]
- 모든 하위 체크박스가 해제됨
- 다음 버튼이 비활성화됨

TC001-006: 화면 전환 테스트
[전제조건] 필수 약관이 모두 체크된 상태
[테스트 단계]
1. 다음 버튼 클릭
2. 화면 전환 애니메이션 확인
3. 이메일 입력 화면 로드 확인
[예상 결과]
- 슬라이드 애니메이션 재생 (좌→우)
- SignupEmailActivity 정상 시작

================================================================================
3.2 이메일 입력 기능 (F002)
================================================================================

3.2.1 기능 개요
- 기능명: 이메일 입력 및 실시간 검증
- 담당 클래스: SignupEmailActivity
- 목적: AI 웹툰 서비스 계정 생성을 위한 유효한 이메일 수집

3.2.2 기능 상세 명세

[입력 요소]
- 이메일 입력 필드 (emailEditText)
- 뒤로가기 버튼 (backButton)
- 다음 버튼 (nextButton)

[출력 요소]
- 이메일 유효성 아이콘 (emailValidIcon)
- 에러 메시지 텍스트 (errorText)
- 로딩 인디케이터 (loadingIndicator)
- 입력 필드 밑줄 색상 변경 (emailUnderline)

[데이터 처리]
- currentEmail: String (현재 입력된 이메일)
- isEmailValid: Boolean (이메일 형식 유효성)
- isEmailAvailable: Boolean (서버 중복 확인 결과)
- validationRunnable: Runnable (디바운싱용)

3.2.3 정상 흐름 (Normal Flow)

N1. 약관 동의 완료 후 이메일 입력 화면 진입
N2. 시스템이 이메일 입력 필드에 자동 포커스 설정
N3. 사용자가 유효한 이메일 주소 입력 (예: user@example.com)
N4. 시스템이 실시간으로 이메일 형식 검증 수행
N5. 500ms 후 시스템이 서버 중복 확인 시작 (로딩 표시)
N6. 1초 후 시스템이 사용 가능한 이메일임을 확인
N7. 시스템이 체크 아이콘 표시 및 다음 버튼 활성화
N8. 사용자가 다음 버튼 클릭
N9. 시스템이 이메일 데이터와 함께 비밀번호 설정 화면으로 전환

3.2.4 대안 흐름 (Alternative Flow)

A1. 실시간 입력 중 형식 오류 시나리오
A1-1. 사용자가 "user@" 까지 입력
A1-2. 시스템이 아직 완성되지 않은 이메일로 판단
A1-3. 에러 메시지 표시 없이 대기 상태 유지
A1-4. 사용자가 "user@example.com" 으로 완성
A1-5. 시스템이 유효성 검증 재시작

A2. 빠른 연속 입력 시나리오 (디바운싱)
A2-1. 사용자가 "u", "us", "use"... 빠르게 연속 입력
A2-2. 시스템이 이전 검증 요청들을 취소
A2-3. 마지막 입력 후 500ms 대기
A2-4. 최종 입력값에 대해서만 서버 검증 수행

A3. 중복 이메일 발견 시나리오
A3-1. 사용자가 이미 가입된 이메일 입력 (test@example.com)
A3-2. 시스템이 형식 검증 통과 후 서버 확인
A3-3. 시스템이 "이미 사용중인 이메일입니다" 메시지 표시
A3-4. 밑줄을 빨간색으로 변경하고 다음 버튼 비활성화

3.2.5 예외 흐름 (Exception Flow)

E1. 네트워크 오류 시나리오
E1-1. 사용자가 유효한 이메일 입력
E1-2. 시스템이 서버 확인 중 네트워크 오류 발생
E1-3. 시스템이 로딩 상태 유지 (타임아웃 대기)
E1-4. 타임아웃 후 기본 상태로 복원

E2. 잘못된 이메일 형식 입력
E2-1. 사용자가 "invalidEmail" 입력
E2-2. 시스템이 이메일 형식 검증 실패 감지
E2-3. 시스템이 "올바른 이메일 주소를 입력해주세요" 메시지 표시
E2-4. 밑줄을 빨간색으로 변경

3.2.6 테스트 케이스

TC002-001: 유효한 이메일 입력 테스트
[전제조건] 이메일 입력 화면이 표시된 상태, 네트워크 연결 정상
[테스트 단계]
1. 이메일 필드에 "test123@gmail.com" 입력
2. 500ms 대기
3. 로딩 인디케이터 표시 확인
4. 1초 추가 대기
5. 체크 아이콘 및 다음 버튼 상태 확인
[예상 결과]
- 로딩 인디케이터가 표시됨
- 체크 아이콘이 나타남
- 다음 버튼이 활성화됨
- 밑줄이 포커스 색상(파란색)으로 유지

TC002-002: 중복 이메일 테스트
[전제조건] 이메일 입력 화면이 표시된 상태
[테스트 단계]
1. 이메일 필드에 "test@example.com" 입력
2. 서버 응답 대기
3. 에러 메시지 및 UI 상태 확인
[예상 결과]
- "이미 사용중인 이메일입니다" 메시지 표시
- 밑줄이 빨간색으로 변경
- 다음 버튼이 비활성화 상태 유지

TC002-003: 잘못된 이메일 형식 테스트
[전제조건] 이메일 입력 화면이 표시된 상태
[테스트 단계]
1. 이메일 필드에 "invalid-email" 입력
2. UI 상태 확인
3. 이메일 필드에 "invalid@" 입력
4. UI 상태 확인
[예상 결과]
- 첫 번째 입력 시 에러 메시지 표시 없음
- 두 번째 입력 시 "올바른 이메일 주소를 입력해주세요" 표시
- 밑줄이 빨간색으로 변경

TC002-004: 디바운싱 기능 테스트
[전제조건] 이메일 입력 화면이 표시된 상태
[테스트 단계]
1. 이메일 필드에 "t" 입력
2. 200ms 후 "e" 추가 입력
3. 200ms 후 "st" 추가 입력
4. 500ms 대기
5. 서버 요청 횟수 확인
[예상 결과]
- 마지막 입력("test") 에 대해서만 서버 요청 발생
- 중간 입력들에 대한 불필요한 서버 요청 없음

TC002-005: 빈 값 입력 테스트
[전제조건] 유효한 이메일이 입력된 상태
[테스트 단계]
1. 이메일 필드의 모든 텍스트 삭제
2. UI 상태 확인
[예상 결과]
- 체크 아이콘 숨김
- 에러 메시지 숨김
- 다음 버튼 비활성화
- 밑줄이 기본 색상으로 변경

TC002-006: 화면 전환 테스트
[전제조건] 유효한 이메일이 입력되고 검증 완료된 상태
[테스트 단계]
1. 다음 버튼 클릭
2. Intent 데이터 확인
3. 화면 전환 확인
[예상 결과]
- 입력된 이메일이 Intent에 포함됨
- SignupPasswordActivity로 전환
- 슬라이드 애니메이션 재생

================================================================================
3.3 비밀번호 설정 기능 (F003)
================================================================================

3.3.1 기능 개요
- 기능명: 비밀번호 설정 및 실시간 조건 검증
- 담당 클래스: SignupPasswordActivity
- 목적: AI 서비스 보안을 위한 강력한 비밀번호 생성

3.3.2 기능 상세 명세

[입력 요소]
- 비밀번호 입력 필드 (passwordEditText)
- 비밀번호 표시/숨기기 토글 (passwordToggle)
- 뒤로가기 버튼 (backButton)
- 다음 버튼 (nextButton)

[출력 요소]
- 조건 1 아이콘/텍스트 (condition1Icon, condition1Text)
- 조건 2 아이콘/텍스트 (condition2Icon, condition2Text)
- 조건 3 아이콘/텍스트 (condition3Icon, condition3Text)
- 비밀번호 밑줄 (passwordUnderline)

[검증 조건]
1. 길이: 8~16자 이내
2. 구성: 특수문자와 소문자 포함
3. 제한: 공백 미포함

[데이터 처리]
- condition1Met, condition2Met, condition3Met: Boolean
- isPasswordVisible: Boolean

3.3.3 정상 흐름 (Normal Flow)

N1. 이메일 입력 완료 후 비밀번호 설정 화면 진입
N2. 시스템이 비밀번호 입력 필드에 자동 포커스 설정
N3. 사용자가 비밀번호 입력 시작 (예: "password123!")
N4. 시스템이 각 문자 입력마다 실시간으로 3가지 조건 검증
N5. 8자 이상 입력 시 조건 1 아이콘이 체크로 변경 (초록색)
N6. 특수문자와 소문자 포함 시 조건 2 아이콘이 체크로 변경
N7. 공백이 없으므로 조건 3 아이콘이 체크로 변경
N8. 모든 조건 충족 시 다음 버튼 활성화
N9. 사용자가 다음 버튼 클릭
N10. 시스템이 비밀번호 데이터와 함께 비밀번호 확인 화면으로 전환

3.3.4 대안 흐름 (Alternative Flow)

A1. 비밀번호 표시/숨기기 토글 시나리오
A1-1. 사용자가 비밀번호 입력 중 표시 버튼 클릭
A1-2. 시스템이 마스킹을 해제하고 평문으로 표시
A1-3. 아이콘이 "숨기기"로 변경
A1-4. 사용자가 다시 버튼 클릭
A1-5. 시스템이 다시 마스킹 처리

A2. 조건별 단계적 만족 시나리오
A2-1. 사용자가 "pass" 입력 (4자 - 조건 불만족)
A2-2. "password" 입력 (8자 - 조건1 만족)
A2-3. "password!" 입력 (특수문자 추가 - 조건2 만족)
A2-4. 공백 없으므로 조건3 자동 만족
A2-5. 모든 조건 만족으로 다음 버튼 활성화

A3. 조건 위반 후 수정 시나리오
A3-1. 사용자가 "PASSWORD123!" 입력 (소문자 없음)
A3-2. 조건2 불만족으로 X 아이콘 및 빨간색 표시
A3-3. 사용자가 "Password123!" 으로 수정
A3-4. 모든 조건 만족으로 체크 아이콘 및 초록색 표시

3.3.5 예외 흐름 (Exception Flow)

E1. 길이 초과 입력 시나리오
E1-1. 사용자가 17자 이상 비밀번호 입력 시도
E1-2. 시스템이 조건1을 불만족으로 변경
E1-3. X 아이콘 및 빨간색 텍스트 표시

E2. 공백 포함 입력 시나리오
E2-1. 사용자가 "password 123!" 입력 (공백 포함)
E2-2. 시스템이 조건3 위반 감지
E2-3. 조건3 아이콘을 X로, 텍스트를 빨간색으로 변경

E3. 특수문자 없는 입력 시나리오
E3-1. 사용자가 "password123" 입력 (특수문자 없음)
E3-2. 시스템이 조건2 위반 감지
E3-3. 조건2 아이콘을 X로, 텍스트를 빨간색으로 표시

3.3.6 테스트 케이스

TC003-001: 모든 조건 만족 비밀번호 테스트
[전제조건] 비밀번호 설정 화면이 표시된 상태
[테스트 단계]
1. 비밀번호 필드에 "password123!" 입력
2. 각 조건별 아이콘 및 텍스트 색상 확인
3. 다음 버튼 상태 확인
[예상 결과]
- 모든 조건 아이콘이 체크(✓)로 표시
- 모든 조건 텍스트가 초록색(#4CAF50)
- 다음 버튼이 활성화됨

TC003-002: 길이 조건 위반 테스트
[전제조건] 비밀번호 설정 화면이 표시된 상태
[테스트 단계]
1. 비밀번호 필드에 "pass!" 입력 (7자)
2. 조건1 상태 확인
3. "password123456789!" 입력 (17자)
4. 조건1 상태 확인
[예상 결과]
- 7자 입력 시: 조건1 X 아이콘, 빨간색 텍스트
- 17자 입력 시: 조건1 X 아이콘, 빨간색 텍스트
- 다음 버튼 비활성화 상태 유지

TC003-003: 특수문자/소문자 조건 테스트
[전제조건] 비밀번호 설정 화면이 표시된 상태
[테스트 단계]
1. "PASSWORD123" 입력 (대문자+숫자만)
2. 조건2 상태 확인
3. "password123" 입력 (소문자+숫자만)
4. 조건2 상태 확인
5. "PASSWORD123!" 입력 (대문자+숫자+특수문자)
6. 조건2 상태 확인
7. "password123!" 입력 (소문자+숫자+특수문자)
8. 조건2 상태 확인
[예상 결과]
- 1,3,5단계: 조건2 X 아이콘, 빨간색
- 7단계: 조건2 체크 아이콘, 초록색

TC003-004: 공백 포함 테스트
[전제조건] 비밀번호 설정 화면이 표시된 상태
[테스트 단계]
1. "password 123!" 입력 (공백 포함)
2. 조건3 상태 확인
3. 공백 제거하여 "password123!" 입력
4. 조건3 상태 확인
[예상 결과]
- 1단계: 조건3 X 아이콘, 빨간색
- 3단계: 조건3 체크 아이콘, 초록색

TC003-005: 비밀번호 표시/숨기기 테스트
[전제조건] 비밀번호 설정 화면이 표시된 상태
[테스트 단계]
1. 비밀번호 필드에 "password123!" 입력
2. 마스킹 상태 확인 (•••••••••••••)
3. 표시 버튼 클릭
4. 평문 표시 확인
5. 아이콘 변경 확인
6. 표시 버튼 재클릭
7. 마스킹 복원 확인
[예상 결과]
- 초기: 마스킹됨, visibility_off 아이콘
- 클릭 후: 평문 표시, visibility 아이콘
- 재클릭 후: 마스킹됨, visibility_off 아이콘

TC003-006: 실시간 검증 테스트
[전제조건] 비밀번호 설정 화면이 표시된 상태
[테스트 단계]
1. "p" 입력 후 조건 상태 확인
2. "pa" 입력 후 조건 상태 확인
3. "pass" 입력 후 조건 상태 확인
4. "password" 입력 후 조건 상태 확인
5. "password!" 입력 후 조건 상태 확인
[예상 결과]
- 1~3단계: 모든 조건 불만족
- 4단계: 조건1,3 만족, 조건2 불만족
- 5단계: 모든 조건 만족

TC003-007: 화면 전환 및 데이터 전달 테스트
[전제조건] 모든 조건을 만족하는 비밀번호가 입력된 상태
[테스트 단계]
1. 다음 버튼 클릭
2. Intent 데이터 확인
3. 화면 전환 확인
[예상 결과]
- 입력된 비밀번호가 Intent에 포함됨
- 이전 단계의 이메일 데이터도 함께 전달됨
- SignupPasswordConfirmActivity로 전환

================================================================================
3.4 비밀번호 확인 기능 (F004)
================================================================================

3.4.1 기능 개요
- 기능명: 비밀번호 재입력 및 일치 확인
- 담당 클래스: SignupPasswordConfirmActivity
- 목적: 비밀번호 입력 오류 방지를 위한 이중 확인

3.4.2 기능 상세 명세

[입력 요소]
- 비밀번호 재입력 필드 (passwordConfirmEditText)
- 비밀번호 표시/숨기기 토글 (passwordToggle)
- 뒤로가기 버튼 (backButton)
- 다음 버튼 (nextButton)

[출력 요소]
- 에러 메시지 텍스트 (errorMessage)
- 비밀번호 밑줄 (passwordUnderline)

[데이터 처리]
- userPassword: String (이전 단계에서 전달받은 비밀번호)
- isPasswordMatching: Boolean (일치 여부)
- isPasswordVisible: Boolean (표시 상태)

3.4.3 정상 흐름 (Normal Flow)

N1. 비밀번호 설정 완료 후 비밀번호 확인 화면 진입
N2. 시스템이 이전 단계에서 설정한 비밀번호를 userPassword로 저장
N3. 시스템이 비밀번호 확인 필드에 자동 포커스 설정
N4. 사용자가 이전에 설정한 비밀번호와 동일한 값 입력
N5. 시스템이 실시간으로 일치 여부 확인
N6. 일치 시 밑줄이 초록색으로 변경되고 에러 메시지 숨김
N7. 다음 버튼이 활성화됨
N8. 사용자가 다음 버튼 클릭
N9. 시스템이 모든 데이터와 함께 개인정보 입력 화면으로 전환

3.4.4 대안 흐름 (Alternative Flow)

A1. 단계적 일치 확인 시나리오
A1-1. 사용자가 첫 글자부터 순차적으로 입력
A1-2. 매 글자마다 시스템이 일치 여부 확인
A1-3. 부분 일치 중에는 기본 상태 유지
A1-4. 완전 일치 시 초록색 밑줄 표시

A2. 비밀번호 표시 기능 사용 시나리오
A2-1. 사용자가 비밀번호 입력 중 확인을 위해 표시 버튼 클릭
A2-2. 시스템이 마스킹 해제하여 평문 표시
A2-3. 사용자가 이전 비밀번호와 비교 확인
A2-4. 필요시 다시 숨기기 버튼 클릭

3.4.5 예외 흐름 (Exception Flow)

E1. 비밀번호 불일치 시나리오
E1-1. 사용자가 이전 비밀번호와 다른 값 입력
E1-2. 시스템이 불일치 감지
E1-3. "비밀번호가 일치하지 않습니다" 메시지 표시
E1-4. 밑줄을 빨간색으로 변경
E1-5. 다음 버튼 비활성화 유지

E2. 전달받은 비밀번호 데이터 없음 시나리오
E2-1. 이전 단계를 거치지 않고 직접 접근한 경우
E2-2. userPassword가 null 또는 빈 문자열
E2-3. 시스템이 빈 문자열과 비교하여 항상 불일치 처리

3.4.6 테스트 케이스

TC004-001: 정확한 비밀번호 재입력 테스트
[전제조건] 이전 단계에서 "password123!" 설정 후 확인 화면 진입
[테스트 단계]
1. 비밀번호 확인 필드에 "password123!" 입력
2. 실시간 일치 확인 동작 관찰
3. 밑줄 색상 및 에러 메시지 상태 확인
4. 다음 버튼 상태 확인
[예상 결과]
- 입력 완료 시 밑줄이 초록색(#4CAF50)으로 변경
- 에러 메시지가 숨겨짐
- 다음 버튼이 활성화됨

TC004-002: 잘못된 비밀번호 재입력 테스트
[전제조건] 이전 단계에서 "password123!" 설정 후 확인 화면 진입
[테스트 단계]
1. 비밀번호 확인 필드에 "wrongpassword!" 입력
2. 실시간 불일치 확인 동작 관찰
3. 에러 메시지 및 밑줄 색상 확인
4. 다음 버튼 상태 확인
[예상 결과]
- "비밀번호가 일치하지 않습니다" 메시지 표시
- 밑줄이 빨간색(#FF5252)으로 변경
- 다음 버튼이 비활성화 상태 유지

TC004-003: 부분 일치 중 상태 테스트
[전제조건] 이전 단계에서 "password123!" 설정 후 확인 화면 진입
[테스트 단계]
1. "pass" 입력 후 상태 확인
2. "password" 입력 후 상태 확인
3. "password123" 입력 후 상태 확인
4. "password123!" 입력 후 상태 확인
[예상 결과]
- 1~3단계: 기본 상태 유지 (에러 없음)
- 4단계: 초록색 밑줄, 다음 버튼 활성화

TC004-004: 비밀번호 표시/숨기기 테스트
[전제조건] 비밀번호 확인 화면이 표시된 상태
[테스트 단계]
1. "password123!" 입력
2. 표시 버튼 클릭
3. 입력 내용 확인
4. 숨기기 버튼 클릭
5. 마스킹 상태 확인
[예상 결과]
- 표시 클릭 시: 평문으로 표시, visibility 아이콘
- 숨기기 클릭 시: 마스킹 처리, visibility_off 아이콘

TC004-005: 빈 값 입력 테스트
[전제조건] 비밀번호 확인 화면이 표시된 상태
[테스트 단계]
1. 빈 상태에서 다음 버튼 상태 확인
2. 텍스트 입력 후 모두 삭제
3. 빈 상태로 복원 후 UI 상태 확인
[예상 결과]
- 빈 상태에서는 에러 메시지 표시 없음
- 다음 버튼 비활성화
- 밑줄은 기본 색상 유지

TC004-006: 데이터 전달 누락 시나리오 테스트
[전제조건] userPassword가 null인 상태로 화면 진입
[테스트 단계]
1. 임의의 비밀번호 입력
2. 시스템 동작 확인
[예상 결과]
- null과 비교하여 항상 불일치 처리
- 정상적인 에러 처리 동작

================================================================================
3.5 개인정보 입력 기능 (F005)
================================================================================

3.5.1 기능 개요
- 기능명: 성별 및 생년월일 입력
- 담당 클래스: SignupProfileActivity
- 목적: AI 웹툰 개인화를 위한 기본 프로필 정보 수집

3.5.2 기능 상세 명세

[입력 요소]
- 성별 선택 버튼 (남성/여성)
- 생년월일 입력 필드
- 뒤로가기 버튼 (backButton)
- 다음 버튼 (nextButton)

[출력 요소]
- 선택된 성별 하이라이트 표시
- 생년월일 형식 가이드
- 입력 완료 시 다음 버튼 활성화

[데이터 처리]
- selectedGender: String ("남성" | "여성" | null)
- birthDate: String (YYYY-MM-DD 형식)
- isValidInput: Boolean (모든 필수 정보 입력 완료)

3.5.3 정상 흐름 (Normal Flow)

N1. 비밀번호 확인 완료 후 개인정보 입력 화면 진입
N2. 시스템이 성별 선택 안내 표시
N3. 사용자가 성별 버튼 중 하나 선택 (예: "남성")
N4. 시스템이 선택된 버튼 하이라이트 처리
N5. 사용자가 생년월일 입력 (예: "1990-05-15")
N6. 시스템이 날짜 형식 유효성 확인
N7. 모든 필수 정보 입력 완료 시 다음 버튼 활성화
N8. 사용자가 다음 버튼 클릭
N9. 시스템이 개인정보와 함께 장르 선택 화면으로 전환

3.5.4 대안 흐름 (Alternative Flow)

A1. 성별 변경 시나리오
A1-1. 사용자가 "남성" 선택
A1-2. 시스템이 남성 버튼 하이라이트
A1-3. 사용자가 마음을 바꿔 "여성" 선택
A1-4. 시스템이 이전 선택 해제하고 여성 버튼 하이라이트

A2. 생년월일 자동 포맷팅 시나리오
A2-1. 사용자가 "19900515" 입력
A2-2. 시스템이 자동으로 "1990-05-15" 형식으로 변환
A2-3. 입력 필드에 포맷된 형태로 표시

3.5.5 예외 흐름 (Exception Flow)

E1. 잘못된 날짜 형식 입력
E1-1. 사용자가 "1990/13/45" 입력 (잘못된 월/일)
E1-2. 시스템이 유효하지 않은 날짜로 판단
E1-3. 에러 메시지 표시 및 다음 버튼 비활성화

E2. 미래 날짜 입력
E2-1. 사용자가 현재 날짜보다 미래 날짜 입력
E2-2. 시스템이 논리적 오류로 판단
E2-3. "올바른 생년월일을 입력해주세요" 메시지 표시

3.5.6 테스트 케이스

TC005-001: 정상적인 개인정보 입력 테스트
[전제조건] 개인정보 입력 화면이 표시된 상태
[테스트 단계]
1. "남성" 버튼 클릭
2. 선택 상태 확인
3. 생년월일 필드에 "1990-05-15" 입력
4. 다음 버튼 상태 확인
[예상 결과]
- 남성 버튼이 하이라이트됨
- 생년월일이 올바른 형식으로 입력됨
- 다음 버튼이 활성화됨

TC005-002: 성별 변경 테스트
[전제조건] 개인정보 입력 화면이 표시된 상태
[테스트 단계]
1. "남성" 버튼 클릭
2. "여성" 버튼 클릭
3. 선택 상태 확인
[예상 결과]
- 남성 버튼 하이라이트 해제
- 여성 버튼 하이라이트 활성화
- 하나의 성별만 선택된 상태 유지

TC005-003: 잘못된 날짜 형식 테스트
[전제조건] 성별이 선택된 상태
[테스트 단계]
1. "1990/02/30" 입력 (존재하지 않는 날짜)
2. "1990-13-15" 입력 (잘못된 월)
3. "abcd-ef-gh" 입력 (숫자가 아닌 값)
4. 각 입력 후 다음 버튼 상태 확인
[예상 결과]
- 모든 경우에 다음 버튼 비활성화
- 적절한 에러 메시지 표시

TC005-004: 부분 입력 테스트
[전제조건] 개인정보 입력 화면이 표시된 상태
[테스트 단계]
1. 성별만 선택하고 다음 버튼 상태 확인
2. 생년월일만 입력하고 다음 버튼 상태 확인
3. 둘 다 입력 완료 후 다음 버튼 상태 확인
[예상 결과]
- 1,2단계: 다음 버튼 비활성화
- 3단계: 다음 버튼 활성화

TC005-005: 데이터 전달 테스트
[전제조건] 모든 개인정보가 입력된 상태
[테스트 단계]
1. 다음 버튼 클릭
2. Intent 데이터 확인
3. 화면 전환 확인
[예상 결과]
- 선택된 성별과 생년월일이 Intent에 포함됨
- 이전 단계 데이터(이메일, 비밀번호)도 함께 전달됨
- SignupGenreActivity로 전환

================================================================================
3.6 장르 선택 기능 (F006)
================================================================================

3.6.1 기능 개요
- 기능명: 웹툰 장르 다중 선택 (최대 5개)
- 담당 클래스: SignupGenreActivity
- 목적: AI 웹툰 생성 시 적용할 스토리 스타일 결정

3.6.2 기능 상세 명세

[입력 요소]
- 장르 버튼들 (40개, 4개 카테고리별 10개씩)
  * 로맨스: 로맨스, 순정, 로맨스 판타지, 달달, 캠퍼스, 오피스, 나이차, 재회, 첫사랑, 계약연애
  * 액션/판타지: 액션, 판타지, 무협, SF, 모험, 능력, 마법, 이세계, 회귀, 환생
  * 드라마/일상: 드라마, 일상, 힐링, 성장, 가족, 우정, 학원, 청춘, 감동, 휴먼
  * 스릴러/공포: 스릴러, 공포, 미스터리, 서스펜스, 범죄, 심리, 복수, 생존, 좀비, 추리
- 뒤로가기 버튼 (backButton)
- 다음 버튼 (nextButton)

[출력 요소]
- 선택 개수 표시 (selectedCountText)
- 선택된 장르 하이라이트 표시
- 최대 선택 초과 시 토스트 메시지

[데이터 처리]
- currentSelectedGenres: MutableSet<String> (선택된 장르 목록)
- maxSelection: Int = 5 (최대 선택 가능 개수)

3.6.3 정상 흐름 (Normal Flow)

N1. 개인정보 입력 완료 후 장르 선택 화면 진입
N2. 시스템이 "0/5" 선택 개수 표시
N3. 사용자가 관심 있는 장르 버튼들 클릭 (예: 로맨스, 판타지, 힐링)
N4. 시스템이 각 선택마다 버튼 하이라이트 및 개수 업데이트
N5. 선택 개수가 "3/5"로 표시됨
N6. 1개 이상 선택 완료로 다음 버튼 활성화
N7. 사용자가 다음 버튼 클릭
N8. 시스템이 선택된 장르 목록과 함께 그림체 선택 화면으로 전환

3.6.4 대안 흐름 (Alternative Flow)

A1. 최대 선택 개수 도달 시나리오
A1-1. 사용자가 5개 장르를 모두 선택
A1-2. 선택 개수가 "5/5"로 표시됨
A1-3. 사용자가 추가 장르 선택 시도
A1-4. 시스템이 "최대 5개까지 선택할 수 있습니다" 토스트 표시
A1-5. 추가 선택 무시됨

A2. 장르 선택 해제 시나리오
A2-1. 사용자가 이미 선택된 장르 버튼 재클릭
A2-2. 시스템이 해당 장르 선택 해제
A2-3. 버튼 하이라이트 제거 및 선택 개수 감소
A2-4. 빈 자리에 다른 장르 선택 가능

A3. 카테고리별 선택 시나리오
A3-1. 사용자가 로맨스 카테고리에서 3개 선택
A3-2. 액션/판타지에서 1개 선택
A3-3. 드라마/일상에서 1개 선택
A3-4. 다양한 카테고리 조합으로 AI 개인화 향상

3.6.5 예외 흐름 (Exception Flow)

E1. 장르 미선택 상태에서 다음 시도
E1-1. 사용자가 아무 장르도 선택하지 않은 상태
E1-2. 다음 버튼이 비활성화 상태 유지
E1-3. 클릭 시도해도 화면 전환 없음

3.6.6 테스트 케이스

TC006-001: 정상적인 장르 선택 테스트
[전제조건] 장르 선택 화면이 표시된 상태
[테스트 단계]
1. "로맨스" 버튼 클릭
2. 선택 개수 확인 ("1/5")
3. "판타지", "힐링" 추가 선택
4. 선택 개수 확인 ("3/5")
5. 다음 버튼 상태 확인
[예상 결과]
- 선택된 버튼들이 하이라이트됨
- 선택 개수가 정확히 표시됨
- 다음 버튼이 활성화됨

TC006-002: 최대 선택 제한 테스트
[전제조건] 장르 선택 화면이 표시된 상태
[테스트 단계]
1. 5개 장르 선택 (로맨스, 판타지, 액션, 힐링, 성장)
2. 선택 개수 확인 ("5/5")
3. 추가 장르 ("미스터리") 선택 시도
4. 토스트 메시지 확인
5. 실제 선택된 장르 개수 재확인
[예상 결과]
- "최대 5개까지 선택할 수 있습니다" 토스트 표시
- 선택 개수 "5/5" 유지
- "미스터리"는 선택되지 않음

TC006-003: 장르 선택 해제 테스트
[전제조건] 3개 장르가 선택된 상태
[테스트 단계]
1. 선택된 장르 중 하나 재클릭
2. 선택 해제 확인
3. 선택 개수 변화 확인
4. 새로운 장르 선택 가능 여부 확인
[예상 결과]
- 선택 해제된 버튼 하이라이트 제거
- 선택 개수 "2/5"로 감소
- 다른 장르 선택 가능

TC006-004: 카테고리별 선택 테스트
[전제조건] 장르 선택 화면이 표시된 상태
[테스트 단계]
1. 각 카테고리에서 1개씩 선택
2. 로맨스: "달달" 선택
3. 액션/판타지: "판타지" 선택
4. 드라마/일상: "힐링" 선택
5. 스릴러/공포: "미스터리" 선택
6. 선택 상태 및 개수 확인
[예상 결과]
- 4개 카테고리에서 각각 선택됨
- 선택 개수 "4/5" 표시
- 다양한 조합으로 AI 개인화 데이터 수집

TC006-005: 최소 선택 조건 테스트
[전제조건] 장르 선택 화면이 표시된 상태
[테스트 단계]
1. 아무것도 선택하지 않은 상태에서 다음 버튼 확인
2. 1개 장르 선택
3. 다음 버튼 상태 변화 확인
[예상 결과]
- 0개 선택 시: 다음 버튼 비활성화
- 1개 선택 시: 다음 버튼 활성화

TC006-006: 데이터 전달 테스트
[전제조건] 원하는 장르들이 선택된 상태
[테스트 단계]
1. 다음 버튼 클릭
2. Intent에 포함된 선택 장르 목록 확인
3. 이전 단계 데이터 전달 확인
4. 화면 전환 확인
[예상 결과]
- 선택된 장르들이 ArrayList로 Intent에 포함됨
- 이전 단계 데이터 모두 전달됨
- SignupArtStyleActivity로 전환

================================================================================
3.7 그림체 선택 기능 (F007)
================================================================================

3.7.1 기능 개요
- 기능명: 웹툰 그림체 단일 선택
- 담당 클래스: SignupArtStyleActivity
- 목적: AI 웹툰 생성 시 적용할 비주얼 스타일 결정 및 회원가입 완료

3.7.2 기능 상세 명세

[입력 요소]
- 6개 그림체 이미지 버튼 (artStyle1~artStyle6)
- 뒤로가기 버튼 (backButton)
- 회원가입 완료 버튼 (nextButton - 텍스트 변경됨)

[출력 요소]
- 선택된 그림체 테두리 하이라이트
- "회원가입 완료" 버튼 활성화
- 메인 페이지로 전환

[데이터 처리]
- currentSelectedArtStyle: String? (선택된 그림체 ID)
- artStyle1~artStyle6: ImageView (그림체 이미지들)

3.7.3 정상 흐름 (Normal Flow)

N1. 장르 선택 완료 후 그림체 선택 화면 진입
N2. 시스템이 6개 그림체 이미지 표시
N3. 다음 버튼 텍스트가 "회원가입 완료"로 변경됨
N4. 사용자가 선호하는 그림체 이미지 클릭 (예: artStyle3)
N5. 시스템이 선택된 그림체에 테두리 하이라이트 적용
N6. 회원가입 완료 버튼이 활성화됨
N7. 사용자가 "회원가입 완료" 버튼 클릭
N8. 시스템이 모든 수집된 데이터와 함께 메인 페이지로 이동
N9. 모든 회원가입 액티비티 스택 종료 (finishAffinity)

3.7.4 대안 흐름 (Alternative Flow)

A1. 그림체 변경 시나리오
A1-1. 사용자가 artStyle2 선택
A1-2. 시스템이 artStyle2에 테두리 적용
A1-3. 사용자가 마음을 바꿔 artStyle5 선택
A1-4. 시스템이 artStyle2 테두리 제거 후 artStyle5에 적용

A2. 그림체별 미리보기 확인 시나리오
A2-1. 사용자가 각 그림체를 차례로 선택해보며 비교
A2-2. 시스템이 선택 변경마다 즉시 하이라이트 업데이트
A2-3. 최종 결정 후 회원가입 완료

3.7.5 예외 흐름 (Exception Flow)

E1. 그림체 미선택 상태에서 완료 시도
E1-1. 사용자가 아무 그림체도 선택하지 않은 상태
E1-2. 회원가입 완료 버튼이 비활성화 상태 유지
E1-3. 버튼 클릭해도 반응 없음

3.7.6 테스트 케이스

TC007-001: 그림체 선택 및 회원가입 완료 테스트
[전제조건] 그림체 선택 화면이 표시된 상태
[테스트 단계]
1. artStyle3 이미지 클릭
2. 테두리 하이라이트 확인
3. 버튼 텍스트 확인 ("회원가입 완료")
4. 버튼 활성화 상태 확인
5. "회원가입 완료" 버튼 클릭
6. 메인 페이지 이동 확인
[예상 결과]
- artStyle3에 테두리 하이라이트 적용
- 버튼이 "회원가입 완료"로 표시됨
- 버튼이 활성화됨
- MainPageActivity로 전환
- 모든 이전 액티비티가 스택에서 제거됨

TC007-002: 그림체 변경 테스트
[전제조건] 그림체 선택 화면이 표시된 상태
[테스트 단계]
1. artStyle1 선택
2. 하이라이트 상태 확인
3. artStyle4 선택
4. 이전 선택 해제 및 새 선택 확인
[예상 결과]
- artStyle1 테두리 제거됨
- artStyle4에 테두리 적용됨
- 하나의 그림체만 선택된 상태 유지

TC007-003: 미선택 상태 테스트
[전제조건] 그림체 선택 화면이 표시된 상태
[테스트 단계]
1. 아무것도 선택하지 않은 상태에서 완료 버튼 확인
2. 완료 버튼 클릭 시도
[예상 결과]
- 완료 버튼이 비활성화 상태 유지
- 버튼 클릭 시 화면 전환 없음

TC007-004: 전체 데이터 전달 테스트
[전제조건] 모든 이전 단계를 거쳐 그림체 선택 완료
[테스트 단계]
1. 회원가입 완료 버튼 클릭
2. 메인 페이지로 전달되는 Intent 데이터 확인
3. 모든 수집된 정보 확인
[예상 결과]
- 이메일, 비밀번호, 성별, 생년월일, 선택 장르, 선택 그림체 모두 포함
- 데이터 무결성 보장
- AI 개인화를 위한 완전한 프로필 구성

================================================================================
4. 통합 시나리오 테스트
================================================================================

4.1 전체 회원가입 플로우 시나리오

TS001: 완전한 회원가입 프로세스
[목적] 전체 7단계 회원가입 프로세스의 통합 테스트
[전제조건] 앱 첫 실행 상태
[테스트 단계]
1. 앱 시작 → 로그인 화면 → "회원가입" 클릭
2. [F001] 전체 약관 동의 → 다음
3. [F002] "newuser@gmail.com" 입력 → 검증 완료 → 다음
4. [F003] "MyPass123!" 입력 → 모든 조건 만족 → 다음
5. [F004] "MyPass123!" 재입력 → 일치 확인 → 다음
6. [F005] 성별 "남성", 생년월일 "1995-03-20" 입력 → 다음
7. [F006] 장르 3개 선택 (로맨스, 판타지, 힐링) → 다음
8. [F007] 그림체 style2 선택 → 회원가입 완료
9. 메인 페이지 진입 확인
[예상 결과]
- 각 단계별 정상 진행
- 데이터 연속성 보장
- 최종 메인 페이지 도달
- AI 개인화 프로필 완성

TS002: 중간 단계 이탈 및 복귀 시나리오
[목적] 사용자가 중간에 앱을 종료했다가 다시 시작하는 경우
[전제조건] 비밀번호 설정까지 완료된 상태
[테스트 단계]
1. 비밀번호 확인 화면에서 앱 종료
2. 앱 재시작
3. 로그인 화면부터 다시 시작 확인
4. 회원가입 플로우 재진행
[예상 결과]
- 중간 상태 저장 없음 (의도된 동작)
- 처음부터 다시 진행 필요
- 데이터 무결성 보장

TS003: 뒤로가기 네비게이션 시나리오
[목적] 사용자가 이전 단계로 돌아가는 경우의 데이터 보존
[전제조건] 장르 선택 화면 진입 상태
[테스트 단계]
1. 뒤로가기 → 개인정보 입력 화면
2. 정보 수정 후 다음 → 장르 선택 화면
3. 수정된 정보 반영 확인
4. 계속 진행하여 완료
[예상 결과]
- 뒤로가기 시 이전 입력 정보 유지
- 수정 사항 정상 반영
- 최종 데이터에 수정사항 포함

4.2 예외 상황 통합 시나리오

TS004: 네트워크 불안정 상황
[목적] 이메일 검증 중 네트워크 오류 발생 시 처리
[전제조건] 이메일 입력 화면, 네트워크 연결 불안정
[테스트 단계]
1. 유효한 이메일 입력
2. 네트워크 연결 끊기
3. 서버 검증 시도 관찰
4. 네트워크 복원
5. 재시도 동작 확인
[예상 결과]
- 적절한 로딩 상태 표시
- 타임아웃 후 오류 처리
- 네트워크 복원 시 정상 동작

TS005: 잘못된 입력 연속 시나리오
[목적] 사용자가 연속으로 잘못된 정보를 입력하는 경우
[전제조건] 각 입력 화면
[테스트 단계]
1. 이메일: 잘못된 형식 → 중복 이메일 → 올바른 이메일
2. 비밀번호: 짧은 비밀번호 → 특수문자 없음 → 올바른 비밀번호
3. 비밀번호 확인: 불일치 → 올바른 재입력
4. 각 단계별 에러 처리 및 복구 확인
[예상 결과]
- 각 오류에 대한 명확한 피드백
- 올바른 입력 시 즉시 정상 상태 복원
- 사용자 가이드 제공

================================================================================
5. 성능 및 품질 기준
================================================================================

5.1 성능 기준
- 화면 전환 시간: 300ms 이내
- 이메일 검증 응답: 1.5초 이내
- 실시간 입력 검증: 100ms 이내 반응
- 메모리 사용량: 회원가입 완료까지 50MB 이하

5.2 사용성 기준
- 터치 영역: 최소 44dp x 44dp
- 텍스트 가독성: 16sp 이상
- 색상 대비: WCAG 2.1 AA 기준 준수
- 에러 메시지: 명확하고 실행 가능한 가이드 제공

5.3 호환성 기준
- Android API 26 이상 지원
- 다양한 화면 크기 대응
- 다양한 입력 방식 지원 (터치, 키보드)

5.4 보안 기준
- 비밀번호 마스킹 처리
- 민감한 정보 로그 출력 금지
- 메모리 내 데이터 암호화 (향후 적용)

================================================================================

문서 작성 완료
작성자: AI Assistant
검토일: 2024년 12월
테스트케이스 총 개수: 35개 (기본 27개 + 통합 5개 + 성능/품질 3개)